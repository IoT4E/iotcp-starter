[
  {
    "id": "e98d6c1b.3f289",
    "type": "tab",
    "label": "Trigger notifications"
  },
  {
    "id": "982404b8.400568",
    "type": "tab",
    "label": "Pre-Registration Samples"
  },
  {
    "id": "df3d1726.eb4da8",
    "type": "tab",
    "label": "Simulate device"
  },
  {
    "id": "39f5521e.0bbf4e",
    "type": "tab",
    "label": "Display historical data"
  },
  {
    "id": "6c7da22.40c285c",
    "type": "subflow",
    "name": "Subflow 1",
    "info": "",
    "in": [],
    "out": []
  },
  {
    "id": "c2d400c3.ce2738",
    "type": "http in",
    "z": "e98d6c1b.3f289",
    "name": "IoT Platform Rule API",
    "url": "/rti-alert",
    "method": "post",
    "swaggerDoc": "",
    "x": 123.75,
    "y": 116.25,
    "wires": [
      [
        "afdfcdff.f98e48"
      ]
    ]
  },
  {
    "id": "ce57ead9.16338",
    "type": "http response",
    "z": "e98d6c1b.3f289",
    "name": "Rule Response Node",
    "x": 605.75,
    "y": 117.25,
    "wires": []
  },
  {
    "id": "afdfcdff.f98e48",
    "type": "function",
    "z": "e98d6c1b.3f289",
    "name": "Rule Trigger Message",
    "func": "// if iotp doesn't exist in the flow, create it\nvar iotpContext = flow.get('iotp')||{};\n// store the value\nflow.set('iotp',msg.payload)\n\nmsg.payload = msg.payload.message\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 354.00000762939453,
    "y": 117.50000095367432,
    "wires": [
      [
        "ce57ead9.16338",
        "588bdcf6.ad730c"
      ]
    ]
  },
  {
    "id": "588bdcf6.ad730c",
    "type": "json",
    "z": "e98d6c1b.3f289",
    "name": "",
    "x": 203.75000381469727,
    "y": 168.00000286102295,
    "wires": [
      [
        "e5a6fbf3.d5cc3"
      ]
    ]
  },
  {
    "id": "aa2867fc.0ae838",
    "type": "http request",
    "z": "e98d6c1b.3f289",
    "name": "RegistrationCall",
    "method": "use",
    "ret": "txt",
    "url": "",
    "tls": "",
    "x": 236.7500228881836,
    "y": 291.7500066757202,
    "wires": [
      [
        "6b8d31f5.94c9f",
        "19b96dda.cdb78a"
      ]
    ]
  },
  {
    "id": "e5a6fbf3.d5cc3",
    "type": "function",
    "z": "e98d6c1b.3f289",
    "name": "Get Appliance Registration Details",
    "func": "// get the env services\nvar process = JSON.parse(context.global.process.env.VCAP_SERVICES); \n\n// get the electronics service credentials\nvar iotECredentials = process[\"ibm-iot-for-electronics\"][0][\"credentials\"];\n\n// basic auth\nvar encodedAuthorization = new Buffer(iotECredentials.apiKey+':'+iotECredentials.authToken).toString('base64');\n\n// registrationURL\nvar registrationURL = iotECredentials.registrationUrl.substring('http://'.length)\n\n// request to /v001/appliance/{applianceID}\nvar msgRequestAppliance = {\n    \"method\":\"GET\",\n    \"url\": \"https://\"+ registrationURL+ \"v001/appliance/\" + msg.payload.d.name, //device id\n    \"headers\": {\n        'Authorization': 'Basic ' + encodedAuthorization,\n\t}\n}\nreturn msgRequestAppliance;",
    "outputs": "1",
    "noerr": 0,
    "x": 246.0000343322754,
    "y": 234.0000057220459,
    "wires": [
      [
        "57096e95.cd476",
        "aa2867fc.0ae838"
      ]
    ]
  },
  {
    "id": "57096e95.cd476",
    "type": "debug",
    "z": "e98d6c1b.3f289",
    "name": "Debug request body",
    "active": true,
    "console": "false",
    "complete": "true",
    "x": 630.5000228881836,
    "y": 233.5000057220459,
    "wires": []
  },
  {
    "id": "6b8d31f5.94c9f",
    "type": "debug",
    "z": "e98d6c1b.3f289",
    "name": "Debug response",
    "active": true,
    "console": "false",
    "complete": "true",
    "x": 549.2500076293945,
    "y": 291.7500066757202,
    "wires": []
  },
  {
    "id": "81e187b2.928ec8",
    "type": "function",
    "z": "e98d6c1b.3f289",
    "name": "Get User Registration Details",
    "func": "// if appliance doesn't exist in the flow, create it\nvar applianceContext = flow.get('appliance')||{};\n// store the value\nflow.set('appliance',msg.payload)\n\n\n// get the env services\nvar process = JSON.parse(context.global.process.env.VCAP_SERVICES); \n\n// get the electronics credentials\nvar iotECredentials = process[\"ibm-iot-for-electronics\"][0][\"credentials\"];\n\n// basic auth\nvar encodedAuthorization = new Buffer(iotECredentials.apiKey+':'+iotECredentials.authToken).toString('base64');\n\n// registrationURL\nvar registrationURL = iotECredentials.registrationUrl.substring('http://'.length)\n\n// request to /v001/user/{userID}\nvar msgRequestUser = {\n    \"method\":\"GET\",\n    \"url\": \"https://\"+registrationURL +\"v001/user/\" + msg.payload.docs[0].userID,\n    \"headers\": {\n        'Authorization': 'Basic ' + encodedAuthorization,\n\t}\n}\nreturn msgRequestUser;",
    "outputs": 1,
    "noerr": 0,
    "x": 249.00000762939453,
    "y": 403.0000081062317,
    "wires": [
      [
        "510d48e9.503af",
        "dd52c855.869b7"
      ]
    ]
  },
  {
    "id": "19b96dda.cdb78a",
    "type": "json",
    "z": "e98d6c1b.3f289",
    "name": "",
    "x": 234.00000381469727,
    "y": 343.0000066757202,
    "wires": [
      [
        "81e187b2.928ec8"
      ]
    ]
  },
  {
    "id": "510d48e9.503af",
    "type": "http request",
    "z": "e98d6c1b.3f289",
    "name": "RegistrationCall",
    "method": "use",
    "ret": "txt",
    "url": "",
    "tls": "",
    "x": 250.25000762939453,
    "y": 461.75000858306885,
    "wires": [
      [
        "db49a05.e4eef6",
        "201e08ec.4bdb68"
      ]
    ]
  },
  {
    "id": "db49a05.e4eef6",
    "type": "debug",
    "z": "e98d6c1b.3f289",
    "name": "Debug response",
    "active": true,
    "console": "false",
    "complete": "true",
    "x": 542.5000076293945,
    "y": 463.00000953674316,
    "wires": []
  },
  {
    "id": "30f0c87b.45e58",
    "type": "function",
    "z": "e98d6c1b.3f289",
    "name": "Generate Notification Email",
    "func": "// if user doesn't exist in the flow, create it\nvar userContext = flow.get('user')||{};\n// store the value\nflow.set('user',msg.payload)\n\n// get the env services\nvar process = JSON.parse(context.global.process.env.VCAP_SERVICES);\n\n// get the electronics credentials\nvar iotECredentials = process[\"ibm-iot-for-electronics\"][0][\"credentials\"];\n\n\n//get the iotp and appliance flow values\nvar iotpContext = flow.get('iotp')||{};\nvar applianceContext = flow.get('appliance')||{};\n\nvar messageIoTP = JSON.parse(iotpContext.message)\n// conver the timestamp into UTC time\nvar timestampRead = (new Date(parseInt(iotpContext.timestamp))).toUTCString();\n\n\n// get the event\nvar eventType \nif(messageIoTP.d.failureType){\n    eventType = messageIoTP.d.failureType\n}else{\n    eventType = messageIoTP.d.currentCycle\n}\n\nmsg = {\n    \"iotp\": iotpContext,\n    \"appliance\":applianceContext,\n    \"user\":userContext,\n    \"payload\":{\n        \"deviceId\":messageIoTP.d.name, // device name\n        \"timestamp\": timestampRead, // time converted\n        \"recommendedAction\":\"Check your device for more information.\",\n        \"eventType\":eventType, // event type\n        \"deviceType\":applianceContext.docs[0].applianceType, // appliance type\n        \"consumerEmail\": userContext.docs[0].userDetail.hasOwnProperty('email')? userContext.docs[0].userDetail.email : \"\"\n    }\n}\n\nvar emailURL;\nif(iotECredentials.registrationUrl.includes(\"stage1\")){\n  emailURL = 'iot4esimulationengine.stage1'\n}else if (iotECredentials.registrationUrl.includes(\"eu-gb\")){\n  emailURL = 'iot4esimulationengineprod.eu-gb'\n}else{\n  emailURL = 'iot4esimulationengineprod'\n}\n\nvar urlFinal =  emailURL.includes('.') ? \"https://\"+emailURL +\".mybluemix.net/sendEmail\" : \"https://\"+emailURL + \".mybluemix.net/sendEmail\"\n\nvar msgRequestUser= {\n    \"method\":\"POST\",\n    \"url\": urlFinal,\n    \"payload\":msg.payload\n    \n}\n\n return msgRequestUser;",
    "outputs": 1,
    "noerr": 0,
    "x": 278.00000762939453,
    "y": 600.5000104904175,
    "wires": [
      [
        "b2776e2a.59075",
        "190a234f.2afd05"
      ]
    ]
  },
  {
    "id": "201e08ec.4bdb68",
    "type": "json",
    "z": "e98d6c1b.3f289",
    "name": "",
    "x": 250.7500228881836,
    "y": 531.7500100135803,
    "wires": [
      [
        "30f0c87b.45e58"
      ]
    ]
  },
  {
    "id": "b2776e2a.59075",
    "type": "debug",
    "z": "e98d6c1b.3f289",
    "name": "Debug request body",
    "active": true,
    "console": "false",
    "complete": "true",
    "x": 560.2500114440918,
    "y": 601.7500095367432,
    "wires": []
  },
  {
    "id": "190a234f.2afd05",
    "type": "http request",
    "z": "e98d6c1b.3f289",
    "name": "EmailRequest",
    "method": "use",
    "ret": "txt",
    "url": "",
    "tls": "",
    "x": 262.2500228881836,
    "y": 671.0000123977661,
    "wires": [
      [
        "7215de6b.142a18"
      ]
    ]
  },
  {
    "id": "7215de6b.142a18",
    "type": "debug",
    "z": "e98d6c1b.3f289",
    "name": "Debug response",
    "active": true,
    "console": "false",
    "complete": "true",
    "x": 543.2500114440918,
    "y": 670.7500114440918,
    "wires": []
  },
  {
    "id": "fd97760e.3a8ec",
    "type": "http in",
    "z": "982404b8.400568",
    "name": "Validate API",
    "url": "/validate",
    "method": "post",
    "swaggerDoc": "",
    "x": 90,
    "y": 80,
    "wires": [
      [
        "5d6202ca.9993e4",
        "ebdfb96.68643c8"
      ]
    ]
  },
  {
    "id": "55e96919.52445",
    "type": "comment",
    "z": "982404b8.400568",
    "name": "API details",
    "info": "###### *What is this?*\n\nThis node will create a RESTful API that can\nbe used as a pre-registration action to validate\nappliance metadata.\n\n---\n\n###### *How do I use it?*\n\nA default pre-registration URL has been set up for your organization. For more information, see your Watson IoT for Connected Products welcome letter.   \n\nTo set up additional pre-registration URLs for your organization, provide the following information to the support contact that is listed in your welcome letter:\n\n- **Method:** POST  \n- **URL:** https://<your_app_name>.mybluemix.net/api/validate\n- **Username and password** if required by the API.\n\n\n---\n\n###### *What now?*\n\nWhen you are registering an appliance,\na validation action will be triggered prior\nto the registration process. It will get the\nappliance metadata from Watson IoT Platform\nand will compare to the values you defined in\nthe response object (see\n**_Customize validations_** node for more info).\n\nIf all the attributes are successfully\nvalidated, then the registration process\ncontinues. If any of the given attributes\nfails during validation, the registration\nprocess is aborted.",
    "x": 80,
    "y": 40,
    "wires": []
  },
  {
    "id": "5d6202ca.9993e4",
    "type": "function",
    "z": "982404b8.400568",
    "name": "Define validations",
    "func": "msg.payload = {\n    \"validate\": {\n        \"deviceInfo\": {\n            \"manufacturer\": \"Swirlmore\",\n            \"fwVersion\": \"1.0.0\"\n        }\n    }\n}\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 350,
    "y": 80,
    "wires": [
      [
        "bcec10d3.303eb8",
        "4737dcc2.7d7714"
      ]
    ]
  },
  {
    "id": "78b04dbd.5e7414",
    "type": "http response",
    "z": "982404b8.400568",
    "name": "Send response",
    "x": 780,
    "y": 80,
    "wires": []
  },
  {
    "id": "bcec10d3.303eb8",
    "type": "debug",
    "z": "982404b8.400568",
    "name": "Debug response",
    "active": true,
    "console": "false",
    "complete": "payload",
    "x": 630,
    "y": 120,
    "wires": []
  },
  {
    "id": "6231d840.c4c6e",
    "type": "comment",
    "z": "982404b8.400568",
    "name": "Customize validations",
    "info": "###### Description\n\nWhen registering a single appliance\nyou can use specific attributes to validate,\nsuch as _Serial Number_, or _Appliance ID_.\n\nIf you are registering multiple appliances at\nonce, the validations defined here will be\nperformed for every appliance, so it makes sense\nto validate more generic attributes, such as\n_Appliance Type_, or _Model_.\n\n---\n\n###### Getting the appliance data\n\nThe appliance information that was initially\nsent to the registration process will be passed\nalong to this node in the **request body**, as\na **_JSON object_**. It will looks like\nsomething like this:\n\n```\n{\n    \"userID\": \"john\",\n    \"applianceID\": \"MY_APPLIANCE\"\n    \"applianceDetail\": {\n        // custom metadata\n    }\n}\n```\n**_Note:_** If you are registering multiple\nappliances at once, you will receive an\n**_array of objects_** in the **request body**.\n\n---\n\n###### Formatting the response\n\nWith the appliance information, you will be\nable to define what attributes you want to\nvalidate and format your response. You must\nsend a **_JSON object_** in the following\nformat:\n\n```\n{\n    \"validate\": {\n        \"deviceInfo\": {\n            // attributes keys and values\n        }\n    }\n}\n```",
    "x": 360,
    "y": 40,
    "wires": []
  },
  {
    "id": "ebdfb96.68643c8",
    "type": "debug",
    "z": "982404b8.400568",
    "name": "Debug request body",
    "active": true,
    "console": "false",
    "complete": "req.body",
    "x": 360,
    "y": 120,
    "wires": []
  },
  {
    "id": "8a7b11bc.1c7d38",
    "type": "comment",
    "z": "982404b8.400568",
    "name": "Response object",
    "info": "###### Description\n\nHere you will find some sample responses you can\nuse as a reference to create your own.\n\n---\n\n###### Registering a single appliance\n\nValidate specific appliance attributes:\n\n```\n{\n    \"validate\": {\n        \"deviceInfo\": {\n            \"applianceType\": \"washingMachine\",\n            \"applianceID\": \"MY_APPLIANCE\",\n            \"serialNumber\": \"ABCD-1234-EFGH-5678\"\n            \n        }\n    }\n}\n```\n\n---\n\n###### Registering multiple appliances\n\nValidate more generic attributes, suitable\nfor every appliance being registered:\n\n```\n{\n    \"validate\": {\n        \"deviceInfo\": {\n            \"applianceType\": \"washingMachine\",\n            \"manufacturer\": \"Swirlmore\",\n            \"model\": \"wkw007ge\",\n            \"fwVersion\": \"1.0.0\"\n            \n        }\n    }\n}\n```\n\n---",
    "x": 780,
    "y": 40,
    "wires": []
  },
  {
    "id": "a4806c6f.9628f8",
    "type": "http in",
    "z": "982404b8.400568",
    "name": "Send Command API",
    "url": "/sendCommand",
    "method": "post",
    "swaggerDoc": "",
    "x": 110,
    "y": 300,
    "wires": [
      [
        "2917581b.900de8",
        "a0e3a885.f1ff18"
      ]
    ]
  },
  {
    "id": "6b391e5.b5d97e",
    "type": "comment",
    "z": "982404b8.400568",
    "name": "API details",
    "info": "###### *What is this?*\n\nThis node will create a RESTful API that can\nbe used as a post-registration action to send\na command to the appliances after registration.\n\n---\n\n###### *How do I use it?*\n\nA default post-registration URL has been set up for your organization. For more information, see your Watson IoT for Connected Products welcome letter.   \n\nTo set up additional post-registration URLs for your organization, provide the following information to the support contact that is listed in your welcome letter:\n\n- **Method:** POST  \n- **URL:** https://<your_app_name>.mybluemix.net/api/validate\n- **Username and password** if required by the API.\n\n\n---\n\n###### *What now?*\n\nAfter the registration process, a command\nwill be sent using the MQTT protocol to all the\nappliances that were successfully registered\n(see **_Command details_** node for more\ninfo).",
    "x": 80,
    "y": 260,
    "wires": []
  },
  {
    "id": "2917581b.900de8",
    "type": "function",
    "z": "982404b8.400568",
    "name": "Define command",
    "func": "msg.payload = {\n    \"command\": {\n        \"commandId\": \"startWashing\"\n    }\n}\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 350,
    "y": 300,
    "wires": [
      [
        "e80b45a5.c68948",
        "27d480e4.cc909"
      ]
    ]
  },
  {
    "id": "1ed7c437.47be3c",
    "type": "http response",
    "z": "982404b8.400568",
    "name": "Send response",
    "x": 780,
    "y": 300,
    "wires": []
  },
  {
    "id": "e80b45a5.c68948",
    "type": "debug",
    "z": "982404b8.400568",
    "name": "Debug response",
    "active": true,
    "console": "false",
    "complete": "payload",
    "x": 630,
    "y": 340,
    "wires": []
  },
  {
    "id": "db2912fe.0623d8",
    "type": "comment",
    "z": "982404b8.400568",
    "name": "Command details",
    "info": "###### Description\n\nTo send a command to the appliances that were\nsuccessfully registered, you need to send a\n**_JSON object_** in the **response body** using\nthe following format:\n\n```\n{\n    \"command\": {\n        \"commandId\": <command name>,\n        \"command\": <payload message>\n    }\n}\n```\n\n**_Note:_** The payload is optional. Use it only\nif needed. ",
    "x": 350,
    "y": 260,
    "wires": []
  },
  {
    "id": "a0e3a885.f1ff18",
    "type": "debug",
    "z": "982404b8.400568",
    "name": "Debug request body",
    "active": true,
    "console": "false",
    "complete": "req.body",
    "x": 360,
    "y": 340,
    "wires": []
  },
  {
    "id": "41edfc14.44738c",
    "type": "comment",
    "z": "982404b8.400568",
    "name": "Response object",
    "info": "###### Description\n\nHere is a sample response you can use as a\nreference to create your own:\n\n```\n{\n    \"command\": {\n        commandId: \"startWashing\"\n    }\n}\n```",
    "x": 780,
    "y": 260,
    "wires": []
  },
  {
    "id": "dd52c855.869b7",
    "type": "debug",
    "z": "e98d6c1b.3f289",
    "name": "Debug request body",
    "active": true,
    "console": "false",
    "complete": "true",
    "x": 554.5000076293945,
    "y": 401.75000762939453,
    "wires": []
  },
  {
    "id": "920859c3.1dae18",
    "type": "comment",
    "z": "e98d6c1b.3f289",
    "name": "Notification flow",
    "info": "###### *What is this?*\n\nThis flow is triggered by a specific \nchange in appliance status (such as a failure).\nThe type of change that can trigger \nthe flow is defined by a rule that is \ncreated in IoT Platform. The flow uses \nIoT for Electronics APIs to identify the \nowner of the appliance and the owner's email. \nIt then generates and sends an email \nnotification with the following information:\n\n- **DeviceID** \n- **Time of action triggered**\n- **Event type**\n- **Device type**\n\n---\n",
    "x": 371.25,
    "y": 50,
    "wires": []
  },
  {
    "id": "4737dcc2.7d7714",
    "type": "json",
    "z": "982404b8.400568",
    "name": "",
    "x": 590,
    "y": 80,
    "wires": [
      [
        "78b04dbd.5e7414"
      ]
    ]
  },
  {
    "id": "27d480e4.cc909",
    "type": "json",
    "z": "982404b8.400568",
    "name": "",
    "x": 590,
    "y": 300,
    "wires": [
      [
        "1ed7c437.47be3c"
      ]
    ]
  },
  {
    "id": "e2864759.0e3338",
    "type": "comment",
    "z": "df3d1726.eb4da8",
    "name": "Device Simulator - Washing Machine",
    "info": "The device simulator uses the IoT for Connected Products starter app to simulate a washing machine. Click Send startWashing command to send an IoT device command to the simulated washer to start the wash cycle.",
    "x": 217,
    "y": 101,
    "wires": []
  },
  {
    "id": "b3b2c220.c1562",
    "type": "comment",
    "z": "df3d1726.eb4da8",
    "name": "Step 1. Configure target",
    "info": "For detailed steps, see [Using Node-RED for device simulation](https://www.ibm.com/support/knowledgecenter/SSQP8H/iot-connected-products/guides/node-red-samples.html) in the Watson IoT for Connected Products documentation.\n\nBefore you begin: \n1. In the Watson IoT Platform dashboard, [generate API key and connect application](https://console-regional.ng.bluemix.net/docs/services/IoT/platform_authorization.html#connecting-applications)  \nMake a note of the apikey and api token that are returned. \n2. In the starter app UI, get the device ID for a simulated washing machine. For information, see [Using the starter](https://www.ibm.com/support/knowledgecenter/SSQP8H/iot-connected-products/getting_started/iot4cpgettingstarted.html).\n\nDo the following steps in Node-RED.\n1. Edit the **Send to IBM IoT Platform** node.\n2. Set authentication to API key.\n3. Create a new API Key with the following properties:\n   - The apikey and api token.\n   - Server name: `{orgid}.messaging.internetofthings.ibmcloud.com`.   \n   Where orgid is the Watson IoT Platform organization ID.\n5. Set Output Type to `Device Command`\n4. Set device type to `washingMachine` and device ID to the ID of the simulated washer machine. \n6. Set Command Type to `startWashing`\n7. Set format to `JSON`\n8. Set data to `data`\n5. Click **Done**.\n6. Click **Deploy**.\n\n\n\n\n",
    "x": 750,
    "y": 113,
    "wires": []
  },
  {
    "id": "96a13ba6.8e14e8",
    "type": "comment",
    "z": "df3d1726.eb4da8",
    "name": "Step 2. Click to send command",
    "info": "To automatically send data:\n1. Edit the **Send data** node.\n2. Change *Repeat* from `none` to the interval of your choice.\n3. Click **Done**.\n4. Click **Deploy**.\n",
    "x": 207,
    "y": 221,
    "wires": []
  },
  {
    "id": "750ab8da.8a1e58",
    "type": "comment",
    "z": "df3d1726.eb4da8",
    "name": "Current wash cycle",
    "info": "The current wash cycle subscribes to and processes device data events from Watson IoT Platform for the simulated washing machine.\n\nThe status outputs are: \n- The current wash cycle\n- Strong vibration failure alert\n- Water leak alert\n \nUse the Send startWashing command node to start a wash.\nUse the starter app dashboard to introduce failures.\n",
    "x": 162,
    "y": 393,
    "wires": []
  },
  {
    "id": "6c837ed7.e1c5a",
    "type": "comment",
    "z": "df3d1726.eb4da8",
    "name": "Step 3: Configure connector",
    "info": "For detailed steps, see [Using Node-RED for device simulation](https://www.ibm.com/support/knowledgecenter/SSQP8H/iot-connected-products/guides/node-red-samples.html) in the Watson IoT for Connected Products documentation.\n\n1. Edit the **IBM IoT App In** node.\n2. Set authentication to API key.\n3. In the **API Key* field, select the API key name that you created in step 1.\n4. Enter the same device type and device ID as in step 1.\n5. Choose to receive All events.\n6. Click **Done**.\n7. Click **Deploy**.",
    "x": 201,
    "y": 537,
    "wires": []
  },
  {
    "id": "8d9821a.8d825e",
    "type": "comment",
    "z": "df3d1726.eb4da8",
    "name": "Step 4: View current cycle",
    "info": "For detailed steps, see [Using Node-RED for device simulation](https://www.ibm.com/support/knowledgecenter/SSQP8H/iot-connected-products/guides/node-red-samples.html) in the Watson IoT for Connected Products documentation.\n\nTest the Current Cycle of Washing Machine.  \n1. Click the enable button in the **cycle** node.  \n This displays the current cycle of the washing Machine in the debug pane each time a message is received.\n2. Click the **Send startWashng command** node button.\n3. Verify that the `msg.payload` that is displayed in the debug pane reflects the current cycle sent by the device.\nFor example:  \n```\n9/18/2017, 1:49:45 PMnode: cycle\nmsg.payload : string[7]\n\"Filling\" \n```",
    "x": 707,
    "y": 521,
    "wires": []
  },
  {
    "id": "cff8956a.9a51d8",
    "type": "inject",
    "z": "df3d1726.eb4da8",
    "name": "Send startWashing command",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "",
    "crontab": "",
    "once": false,
    "x": 272,
    "y": 162,
    "wires": [
      [
        "ef85a228.2e0b"
      ]
    ]
  },
  {
    "id": "ef85a228.2e0b",
    "type": "ibmiot out",
    "z": "df3d1726.eb4da8",
    "authentication": "apiKey",
    "apiKey": "",
    "outputType": "cmd",
    "deviceId": " ",
    "deviceType": " washingMachine",
    "eventCommandType": " startWashing",
    "format": "json",
    "data": "data",
    "qos": 0,
    "name": "Send to IBM IoT Platform",
    "service": "registered",
    "x": 761,
    "y": 163,
    "wires": []
  },
  {
    "id": "5274a958.dea088",
    "type": "ibmiot in",
    "z": "df3d1726.eb4da8",
    "authentication": "apiKey",
    "apiKey": "",
    "inputType": "evt",
    "deviceId": "",
    "applicationId": "",
    "deviceType": "+",
    "eventType": "+",
    "commandType": "",
    "format": "json",
    "name": "IBM IoT App In",
    "service": "registered",
    "allDevices": false,
    "allApplications": "",
    "allDeviceTypes": true,
    "allEvents": true,
    "allCommands": false,
    "allFormats": "",
    "qos": 0,
    "x": 217,
    "y": 463,
    "wires": [
      [
        "c87ea598.b3eea8",
        "4b2d7a01.ada9d4"
      ]
    ]
  },
  {
    "id": "5bdf3400.89cc4c",
    "type": "debug",
    "z": "df3d1726.eb4da8",
    "name": "cycle",
    "active": true,
    "console": "false",
    "complete": "payload",
    "x": 647,
    "y": 461,
    "wires": []
  },
  {
    "id": "c87ea598.b3eea8",
    "type": "debug",
    "z": "df3d1726.eb4da8",
    "name": "",
    "active": true,
    "console": "false",
    "complete": "false",
    "x": 407,
    "y": 461,
    "wires": []
  },
  {
    "id": "109dd791.ac6398",
    "type": "inject",
    "z": "df3d1726.eb4da8",
    "name": "Send stopWashing command",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "",
    "crontab": "",
    "once": false,
    "x": 277,
    "y": 281,
    "wires": [
      [
        "5638161a.60e768"
      ]
    ]
  },
  {
    "id": "5638161a.60e768",
    "type": "ibmiot out",
    "z": "df3d1726.eb4da8",
    "authentication": "apiKey",
    "apiKey": "",
    "outputType": "cmd",
    "deviceId": " ",
    "deviceType": "washingMachine",
    "eventCommandType": "stopWashing",
    "format": "json",
    "data": "data",
    "qos": 0,
    "name": "Send to IBM IoT Platform",
    "service": "registered",
    "x": 757,
    "y": 283,
    "wires": []
  },
  {
    "id": "4b2d7a01.ada9d4",
    "type": "function",
    "z": "df3d1726.eb4da8",
    "name": "Definition of outputs",
    "func": "var vibration = {payload: msg.payload.d.vibration};\nvar waterPressure = {payload: msg.payload.d.waterPressure};\nvar currentCycle = { payload: msg.payload.d.currentCycle };\n\n\nreturn [vibration,waterPressure, currentCycle]",
    "outputs": "3",
    "noerr": 0,
    "x": 437,
    "y": 401,
    "wires": [
      [
        "3b17b916.987c96"
      ],
      [
        "fb95b1ba.d3f9c"
      ],
      [
        "5bdf3400.89cc4c"
      ]
    ]
  },
  {
    "id": "3b17b916.987c96",
    "type": "switch",
    "z": "df3d1726.eb4da8",
    "name": "Strong vibration failure",
    "property": "payload",
    "propertyType": "msg",
    "rules": [
      {
        "t": "gte",
        "v": "150",
        "vt": "num"
      }
    ],
    "checkall": "true",
    "outputs": 1,
    "x": 697,
    "y": 381,
    "wires": [
      [
        "f3e6fc17.9fb77"
      ]
    ]
  },
  {
    "id": "25d0b673.8f6faa",
    "type": "debug",
    "z": "df3d1726.eb4da8",
    "name": "Status",
    "active": true,
    "complete": "payload",
    "x": 1067,
    "y": 401,
    "wires": []
  },
  {
    "id": "f3e6fc17.9fb77",
    "type": "template",
    "z": "df3d1726.eb4da8",
    "name": "Strong vibration",
    "field": "payload",
    "fieldType": "msg",
    "syntax": "mustache",
    "template": "Failure - Strong Vibration ({{payload}})",
    "x": 897,
    "y": 381,
    "wires": [
      [
        "25d0b673.8f6faa"
      ]
    ]
  },
  {
    "id": "d17a7407.a591a8",
    "type": "template",
    "z": "df3d1726.eb4da8",
    "name": "Water leak",
    "field": "payload",
    "fieldType": "msg",
    "syntax": "mustache",
    "template": "Failure - Water Leask ({{payload}})",
    "x": 887,
    "y": 421,
    "wires": [
      [
        "25d0b673.8f6faa"
      ]
    ]
  },
  {
    "id": "fb95b1ba.d3f9c",
    "type": "switch",
    "z": "df3d1726.eb4da8",
    "name": "Water leak failure",
    "property": "payload",
    "propertyType": "msg",
    "rules": [
      {
        "t": "lte",
        "v": "30",
        "vt": "num"
      }
    ],
    "checkall": "true",
    "outputs": 1,
    "x": 687,
    "y": 421,
    "wires": [
      [
        "d17a7407.a591a8"
      ]
    ]
  },
  {
    "id": "cbe46b39.aff7b8",
    "type": "comment",
    "z": "df3d1726.eb4da8",
    "name": "Step 5: View failure status",
    "info": "For detailed steps, see [Using Node-RED for device simulation](https://www.ibm.com/support/knowledgecenter/SSQP8H/iot-connected-products/guides/node-red-samples.html) in the Watson IoT for Connected Products documentation.\n\nTest the Status of Washing Machine.  \n1. Click the enable button in the **status** node.  \n This displays the failure type if there is any in the debug pane each time a message is received.\n2. Click the **Send Command** node button.\n3. Verify that the `msg.payload` that is displayed in the debug pane reflects the current cycle sent by the device.\nFor example:  \n```\n9/6/2017, 12:31:23 PMnode: status\nmsg.payload : string[35]\n\"Failure - Strong Vibration (150)\"\n```",
    "x": 1047,
    "y": 321,
    "wires": []
  },
  {
    "id": "6344d87b.d0ce38",
    "type": "cloudant in",
    "z": "39f5521e.0bbf4e",
    "name": "Cloudant",
    "cloudant": "",
    "database": " iotp_{orgID}_dafault_YYYY-MM-DD",
    "service": "_ext_",
    "search": "_idx_",
    "design": "iotp",
    "index": "search",
    "x": 337,
    "y": 229,
    "wires": [
      [
        "3ba10165.6d02be",
        "f3405808.5f0888"
      ]
    ]
  },
  {
    "id": "27f0e5f4.95e9ca",
    "type": "inject",
    "z": "39f5521e.0bbf4e",
    "name": "Query",
    "topic": "",
    "payload": "{\"query\":\"deviceId:<yourdevice> AND deviceType:washingMachine\", \"sort\":\"timestamp<string>\"}",
    "payloadType": "json",
    "repeat": "",
    "crontab": "",
    "once": false,
    "x": 127,
    "y": 229,
    "wires": [
      [
        "6344d87b.d0ce38"
      ]
    ]
  },
  {
    "id": "3ba10165.6d02be",
    "type": "debug",
    "z": "39f5521e.0bbf4e",
    "name": "",
    "active": true,
    "console": "false",
    "complete": "false",
    "x": 527,
    "y": 309,
    "wires": []
  },
  {
    "id": "83330517.cc17a8",
    "type": "comment",
    "z": "39f5521e.0bbf4e",
    "name": "Query for and display historical device data",
    "info": "On the Query node change the \njson payload content where:\n\ndeviceId - `your device id created in starter app`\n\neg. {\"query\":\"deviceId:8332617F277B AND \ndeviceType:washingMachine\", \"sort\":\"timestamp<string>\"}\n\n",
    "x": 175,
    "y": 98,
    "wires": []
  },
  {
    "id": "7e65b165.18517",
    "type": "comment",
    "z": "39f5521e.0bbf4e",
    "name": "Step 1: Configure Cloudant Connection",
    "info": "For detailed steps, see [Using Node-RED for device simulation](https://www.ibm.com/support/knowledgecenter/SSQP8H/iot-connected-products/guides/node-red-samples.html) in the Watson IoT for Connected Products documentation.\n\nBefore you begin:  \n\nIn the IoT for Connected Products dashboard, find your Cloudant information:\n  - Username\n  - Password  \n\n  For more information, see [Cloudant NoSQL DB data access](https://www.ibm.com/support/knowledgecenter/SSQP8H/iot-connected-products/developing/data_access.html) in the Watson IoT for Connected Products documentation.\n\nDo the following steps in Node-RED.\n1. Edit the **Cloudant** node.\n2. Set Service to **External cloudant or couchdb service**\n3. Create a new Server with the following properties:\n   - Host: `{username}.cloudant.com`\n   - Username: Your Cloudant username\n   - Password: Your Cloudant password\n5. Set Database to the database you want to search.  \nThe Database parameter is in the following format:\n`iotp_{orgID}_{DBName}_YYYY-MM-DD`\nWhere orgID is your IBM Watson IoT Platform organization ID.\nExample: `iotp_mura30_default_2017-05-22`  \n\n4. Set Search by to search index with `iotp / search`\n5. Click **Done**.\n6. Click **Deploy**.\n\n\n\n\n",
    "x": 427,
    "y": 169,
    "wires": []
  },
  {
    "id": "f3405808.5f0888",
    "type": "function",
    "z": "39f5521e.0bbf4e",
    "name": "Format graph data",
    "func": "//Array for graph to be send\nvar newArray = [];\n\n// itenerate on all the content response from Cloudant\nfor(var i=0; i< msg.payload.length; i++){\n\n    //date and time to timestamp unix\n    var myDate = msg.payload[i].timestamp;\n    var d = new Date(myDate);\n\n    newArray.push( {\n        timestamp: d.getTime(), // data in timestamp unix\n        data: {\n            vibration:msg.payload[i].data.d.vibration, // data to graph\n            waterPressure:msg.payload[i].data.d.waterPressure // data to graph\n        } \n    });\n  }\n\nmsg.payload = newArray;\n\nreturn msg;\n\n",
    "outputs": 1,
    "noerr": 0,
    "x": 547,
    "y": 229,
    "wires": [
      [
        "b1389485.c2ab68",
        "e66bd8cd.268f68"
      ]
    ]
  },
  {
    "id": "e66bd8cd.268f68",
    "type": "iot-datasource",
    "z": "39f5521e.0bbf4e",
    "name": "WashingMachineGraph",
    "tstampField": "timestamp",
    "dataField": "data",
    "disableDiscover": false,
    "x": 787,
    "y": 229,
    "wires": [
      [
        "400d061e.a13bb8"
      ]
    ]
  },
  {
    "id": "b1389485.c2ab68",
    "type": "debug",
    "z": "39f5521e.0bbf4e",
    "name": "",
    "active": true,
    "console": "false",
    "complete": "false",
    "x": 767,
    "y": 309,
    "wires": []
  },
  {
    "id": "25860f4.f38a5f",
    "type": "comment",
    "z": "39f5521e.0bbf4e",
    "name": "Step 3: Create a device data graph",
    "info": "For detailed steps, see [Using Node-RED for device simulation](https://www.ibm.com/support/knowledgecenter/SSQP8H/iot-connected-products/guides/node-red-samples.html) in the Watson IoT for Connected Products documentation.\n\nBefore you begin:  \nAccess the Node-RED graphics dashboard.\n\nIn a new browser window or tab, open the following URL:   \n `https://{your-node-red-ID}.mybluemix.net/dash` \n Where _your-node-red-ID_ is name of your deployed Node-RED instance.\n\nDo the following steps in the Node-RED dashboard.\n1. Click **Create New Dashboard** and give it a descriptive name.\n2. Create a chart.\n 1. Click **Create New Chart** and give it a descriptive name.\n 2. For Plugin, select **Line/Area Chart**.\n 3. For Datasource, select **WashingMachineGraph**.\n 4. For Request data..., enter `1` and select **day(s) ago**.\n2. Click **Done**.\n\n\n\n\n\n\n",
    "x": 817,
    "y": 169,
    "wires": []
  },
  {
    "id": "400d061e.a13bb8",
    "type": "debug",
    "z": "39f5521e.0bbf4e",
    "name": "",
    "active": true,
    "console": "false",
    "complete": "false",
    "x": 1007,
    "y": 229,
    "wires": []
  },
  {
    "id": "8a72f85f.332a88",
    "type": "comment",
    "z": "39f5521e.0bbf4e",
    "name": "Step 2: Edit the query",
    "info": "For detailed steps, see [Using Node-RED for device simulation](https://www.ibm.com/support/knowledgecenter/SSQP8H/iot-connected-products/guides/node-red-samples.html) in the Watson IoT for Connected Products documentation.\n\nBefore you begin:  \n\nIdentify the device ID for the simulated washing machine. \n\nDo the following steps in Node-RED.\n1. Edit the **Query** node.\n2. Edit the Payload.\n3. Update the payload value with the device ID.  \n```json\n{\n    \"query\": \"deviceId:<device ID> AND deviceType:washingMachine\",\n    \"sort\": \"timestamp<string>\"\n}\n```\n3. Click **Done**.\n6. Click **Deploy**.\n\n\n\n\n",
    "x": 117,
    "y": 169,
    "wires": []
  },
  {
    "id": "d88eb51c.62d858",
    "type": "comment",
    "z": "39f5521e.0bbf4e",
    "name": "Step 4: Run the query",
    "info": "For detailed steps, see [Using Node-RED for device simulation](https://www.ibm.com/support/knowledgecenter/SSQP8H/iot-connected-products/guides/node-red-samples.html) in the Watson IoT for Connected Products documentation.\n\nDo the following steps in Node-RED.\n1. Click the Query node button to query Cloudant for your device data.\n2. Verify that data is returned.\n\nDo the following steps in the Node-RED dashboard.\n1. Open the Node-RED dashboard:   \n `https://{your-node-red-ID}.mybluemix.net/dash`  \n \n Where _your-node-red-ID_ is name of your deployed Node-RED instance.\n2. Select the chart that you created as part of step 3.\n2. Verify that the device data is correctly graphed.\n\n\n\n\n\n\n",
    "x": 117,
    "y": 289,
    "wires": []
  }
]
